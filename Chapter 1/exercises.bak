#lang racket

;; Exercise 3
(define sum-of-squares-of-two-largest 
    (lambda (x y z)
        (if (>= x y)
            (sum-of-squares x (if (>= y z)
                                  y
                                  z))
            (sum-of-squares y z))))

;; Exercise 11
;; Recursive Process
(define (f n)
    (if (< n 3)
        n
        (+ (f (- n 1))
           (double (f (- n 2)))
           (treble (f (- n 3))))))

;; Iterative Process
(define (f n)
    (define (f-iter a b c count)
        (if (= count 0)
            a
            (f-iter (+ a b c)
                    (double a)
                    (* (/ 3 2) b)
                    (dec count))))
    (if (< n 3)
        n
        (f-iter 2 1 0 n)))

;; Exercise 12
(define (pascal-triangle n k)
  (define (binomial-coefficient n k)
    (cond ((or (= k 0) (= k n)) 1)
          (else (+ (binomial-coefficient (- n 1)
                                         (- k 1))
                   (binomial-coefficient (- n 1)
                                         k)))))
  (if (and (<= k n) (>= n 0) (>= k 0))
      (binomial-coefficient n k)
      (error "No corresponding value in Pascals Triangle"))

;; Exercise 16
(define (exp b n)
    (define (exp-iter-log base counter a)
        (cond ((= counter 0) a)
              ((even? counter) (exp-iter-log (square base)
                                             (/ counter 2)
                                             a))
              (else (exp-iter-log base
                                  (dec counter)
                                  (* base a))))
    (exp-iter-log b n 1))

;; Exercise 17


;; Useful functions
(define (sum-of-squares x y)
    (+ (square x) (square y)))

(define (square x) (* x x))

(define (double x)
    (* 2 x))

(define (half-of x)
    (/ x 2))

(define (treble x)
    (* 3 x))

(define (dec x)
    (- x 1))

;; Exercise 30


